/*
 * FVC
 *
 * API para o app Floripa Versus Corona  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: binhara@azuris.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
 
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AuthApiController : ControllerBase
    { 
        /// <summary>
        /// Procedimento de autenticacao
        /// </summary>
        /// <remarks>Autentica&amp;ccedil;&amp;atilde;o do usu&amp;aacute;rio </remarks>
        /// <param name="requestBody">Dados do usuario e senha</param>
        /// <response code="200">Retorna o token autenticado com os dados base de usuario.</response>
        /// <response code="400">Falha na autenticao.</response>
        /// <response code="401">Falha na autenticao.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/binhara/FloripaVsCorona/1/auth/login")]
        [ValidateModelState]
        [SwaggerOperation("AuthLoginPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessTokenDef), description: "Retorna o token autenticado com os dados base de usuario.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDef), description: "Unexpected error")]
        public virtual IActionResult AuthLoginPost([FromBody]ReqLoginDef requestBody)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessTokenDef));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorDef));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorDef));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorDef));

            string exampleJson = null;
            exampleJson = "{\n  \"access_token\" : \"access_token\",\n  \"idrede_distribuicao\" : 1,\n  \"phoneNumber\" : \"phoneNumber\",\n  \"validade_licenca_assinou\" : \"validade_licenca_assinou\",\n  \"token_type\" : \"token_type\",\n  \"idpessoa\" : 0,\n  \"isNewUser\" : \"isNewUser\",\n  \"expires_in\" : \"expires_in\",\n  \"idtipo_pessoa\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AccessTokenDef>(exampleJson)
            : default(AccessTokenDef);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Procedimento de logout
        /// </summary>
        /// <remarks>Inativa o token do  usu&amp;aacute;rio </remarks>
        /// <param name="authorization">Token de identifica&amp;ccedil;&amp;atilde;o do usu&amp;aacute;rio.</param>
        /// <response code="200">Realizou a desativacao do token do usuario.</response>
        /// <response code="400">Falha na autenticao.</response>
        /// <response code="401">Falha na autenticao.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/binhara/FloripaVsCorona/1/auth/logout")]
        [ValidateModelState]
        [SwaggerOperation("AuthLogoutPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ErrorDef), description: "Realizou a desativacao do token do usuario.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDef), description: "Unexpected error")]
        public virtual IActionResult AuthLogoutPost([FromHeader][Required()]string authorization)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ErrorDef));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorDef));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorDef));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorDef));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\",\n  \"error\" : \"error\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ErrorDef>(exampleJson)
            : default(ErrorDef);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Procedimento validar o sms
        /// </summary>
        /// <remarks>confere código de validação usuário / dispositivo móvel enviado via SMS </remarks>
        /// <param name="requestBody">Dados do usuario e senha</param>
        /// <response code="200">Enviou o sms</response>
        /// <response code="400">Falha na autenticao.</response>
        /// <response code="401">Falha na autenticao.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/binhara/FloripaVsCorona/1/users/checkMobileValidationCode")]
        [ValidateModelState]
        [SwaggerOperation("UsersCheckMobileValidationCodePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ValidationReturnDef), description: "Enviou o sms")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDef), description: "Unexpected error")]
        public virtual IActionResult UsersCheckMobileValidationCodePost([FromBody]ReqMobileValidationDef requestBody)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ValidationReturnDef));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorDef));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorDef));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorDef));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"data\" : {\n    \"isNewUser\" : \"isNewUser\"\n  },\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ValidationReturnDef>(exampleJson)
            : default(ValidationReturnDef);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Procedimento cadastro novo
        /// </summary>
        /// <remarks>cadastra um novo usuário </remarks>
        /// <param name="requestBody">Dados do usuario</param>
        /// <param name="authorization">Token de identifica&amp;ccedil;&amp;atilde;o do usu&amp;aacute;rio.</param>
        /// <response code="200">Cadastrado com sucesso o sms</response>
        /// <response code="400">Falha na autenticao.</response>
        /// <response code="401">Falha na autenticao.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/binhara/FloripaVsCorona/1/users/register")]
        [ValidateModelState]
        [SwaggerOperation("UsersRegisterPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ErrorDef), description: "Cadastrado com sucesso o sms")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDef), description: "Unexpected error")]
        public virtual IActionResult UsersRegisterPost([FromBody]ReqNewUsuarioDef requestBody, [FromHeader]string authorization)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ErrorDef));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorDef));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorDef));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorDef));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\",\n  \"error\" : \"error\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ErrorDef>(exampleJson)
            : default(ErrorDef);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Procedimento envio de sms
        /// </summary>
        /// <remarks>envia SMS de validação de usuário / dispositivo móvel </remarks>
        /// <param name="requestBody">Dados do user e device</param>
        /// <response code="200">Enviou o sms</response>
        /// <response code="400">Falha na autenticao.</response>
        /// <response code="401">Falha na autenticao.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/binhara/FloripaVsCorona/1/users/sendMobileValidationCode")]
        [ValidateModelState]
        [SwaggerOperation("UsersSendMobileValidationCodePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ErrorDef), description: "Enviou o sms")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorDef), description: "Falha na autenticao.")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDef), description: "Unexpected error")]
        public virtual IActionResult UsersSendMobileValidationCodePost([FromBody]ReqMobileValidationDef requestBody)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ErrorDef));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorDef));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorDef));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorDef));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\",\n  \"error\" : \"error\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ErrorDef>(exampleJson)
            : default(ErrorDef);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
