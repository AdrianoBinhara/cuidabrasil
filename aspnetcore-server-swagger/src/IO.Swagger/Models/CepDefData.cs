/*
 * FVC
 *
 * API para o app Floripa Versus Corona  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: binhara@azuris.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Dados do retorno da api  de CEP
    /// </summary>
    [DataContract]
    public partial class CepDefData : IEquatable<CepDefData>
    { 
        /// <summary>
        /// CEP do retorno
        /// </summary>
        /// <value>CEP do retorno</value>
        [DataMember(Name="cep")]
        public string Cep { get; set; }

        /// <summary>
        /// Rua do retorno
        /// </summary>
        /// <value>Rua do retorno</value>
        [DataMember(Name="logradouro")]
        public string Logradouro { get; set; }

        /// <summary>
        /// Complemento do retorno
        /// </summary>
        /// <value>Complemento do retorno</value>
        [DataMember(Name="complemento")]
        public string Complemento { get; set; }

        /// <summary>
        /// Bairro do retorno
        /// </summary>
        /// <value>Bairro do retorno</value>
        [DataMember(Name="bairro")]
        public string Bairro { get; set; }

        /// <summary>
        /// Cidade do retorno
        /// </summary>
        /// <value>Cidade do retorno</value>
        [DataMember(Name="localidade")]
        public string Localidade { get; set; }

        /// <summary>
        /// Estado do retorno
        /// </summary>
        /// <value>Estado do retorno</value>
        [DataMember(Name="uf")]
        public string Uf { get; set; }

        /// <summary>
        /// Unidade do retorno
        /// </summary>
        /// <value>Unidade do retorno</value>
        [DataMember(Name="unidade")]
        public string Unidade { get; set; }

        /// <summary>
        /// Nr no ibge do retorno
        /// </summary>
        /// <value>Nr no ibge do retorno</value>
        [DataMember(Name="ibge")]
        public string Ibge { get; set; }

        /// <summary>
        /// Gia do retorno
        /// </summary>
        /// <value>Gia do retorno</value>
        [DataMember(Name="gia")]
        public string Gia { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CepDefData {\n");
            sb.Append("  Cep: ").Append(Cep).Append("\n");
            sb.Append("  Logradouro: ").Append(Logradouro).Append("\n");
            sb.Append("  Complemento: ").Append(Complemento).Append("\n");
            sb.Append("  Bairro: ").Append(Bairro).Append("\n");
            sb.Append("  Localidade: ").Append(Localidade).Append("\n");
            sb.Append("  Uf: ").Append(Uf).Append("\n");
            sb.Append("  Unidade: ").Append(Unidade).Append("\n");
            sb.Append("  Ibge: ").Append(Ibge).Append("\n");
            sb.Append("  Gia: ").Append(Gia).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CepDefData)obj);
        }

        /// <summary>
        /// Returns true if CepDefData instances are equal
        /// </summary>
        /// <param name="other">Instance of CepDefData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CepDefData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Cep == other.Cep ||
                    Cep != null &&
                    Cep.Equals(other.Cep)
                ) && 
                (
                    Logradouro == other.Logradouro ||
                    Logradouro != null &&
                    Logradouro.Equals(other.Logradouro)
                ) && 
                (
                    Complemento == other.Complemento ||
                    Complemento != null &&
                    Complemento.Equals(other.Complemento)
                ) && 
                (
                    Bairro == other.Bairro ||
                    Bairro != null &&
                    Bairro.Equals(other.Bairro)
                ) && 
                (
                    Localidade == other.Localidade ||
                    Localidade != null &&
                    Localidade.Equals(other.Localidade)
                ) && 
                (
                    Uf == other.Uf ||
                    Uf != null &&
                    Uf.Equals(other.Uf)
                ) && 
                (
                    Unidade == other.Unidade ||
                    Unidade != null &&
                    Unidade.Equals(other.Unidade)
                ) && 
                (
                    Ibge == other.Ibge ||
                    Ibge != null &&
                    Ibge.Equals(other.Ibge)
                ) && 
                (
                    Gia == other.Gia ||
                    Gia != null &&
                    Gia.Equals(other.Gia)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Cep != null)
                    hashCode = hashCode * 59 + Cep.GetHashCode();
                    if (Logradouro != null)
                    hashCode = hashCode * 59 + Logradouro.GetHashCode();
                    if (Complemento != null)
                    hashCode = hashCode * 59 + Complemento.GetHashCode();
                    if (Bairro != null)
                    hashCode = hashCode * 59 + Bairro.GetHashCode();
                    if (Localidade != null)
                    hashCode = hashCode * 59 + Localidade.GetHashCode();
                    if (Uf != null)
                    hashCode = hashCode * 59 + Uf.GetHashCode();
                    if (Unidade != null)
                    hashCode = hashCode * 59 + Unidade.GetHashCode();
                    if (Ibge != null)
                    hashCode = hashCode * 59 + Ibge.GetHashCode();
                    if (Gia != null)
                    hashCode = hashCode * 59 + Gia.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CepDefData left, CepDefData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CepDefData left, CepDefData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
