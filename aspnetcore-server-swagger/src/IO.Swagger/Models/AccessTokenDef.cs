/*
 * FVC
 *
 * API para o app Floripa Versus Corona  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: binhara@azuris.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccessTokenDef : IEquatable<AccessTokenDef>
    { 
        /// <summary>
        /// Indica o tipo de token gerado
        /// </summary>
        /// <value>Indica o tipo de token gerado</value>
        [DataMember(Name="token_type")]
        public string TokenType { get; set; }

        /// <summary>
        /// Token utilizado para o Authorization e identifica&amp;ccedil;&amp;atilde;o do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Token utilizado para o Authorization e identifica&amp;ccedil;&amp;atilde;o do usu&amp;aacute;rio.</value>
        [DataMember(Name="access_token")]
        public string AccessToken { get; set; }

        /// <summary>
        /// Data quando o token deve expirar
        /// </summary>
        /// <value>Data quando o token deve expirar</value>
        [DataMember(Name="expires_in")]
        public string ExpiresIn { get; set; }

        /// <summary>
        /// Id da pessoa na base
        /// </summary>
        /// <value>Id da pessoa na base</value>
        [DataMember(Name="idpessoa")]
        public long? Idpessoa { get; set; }

        /// <summary>
        /// Id do tipo de pessoa
        /// </summary>
        /// <value>Id do tipo de pessoa</value>
        [DataMember(Name="idtipo_pessoa")]
        public long? IdtipoPessoa { get; set; }

        /// <summary>
        /// Validade da licenca
        /// </summary>
        /// <value>Validade da licenca</value>
        [DataMember(Name="validade_licenca_assinou")]
        public string ValidadeLicencaAssinou { get; set; }

        /// <summary>
        /// Id da rede de distribuicao
        /// </summary>
        /// <value>Id da rede de distribuicao</value>
        [DataMember(Name="idrede_distribuicao")]
        public long? IdredeDistribuicao { get; set; }

        /// <summary>
        /// retorna o tipo do usuario que esta sendo cadastrado
        /// </summary>
        /// <value>retorna o tipo do usuario que esta sendo cadastrado</value>
        [DataMember(Name="isNewUser")]
        public string IsNewUser { get; set; }

        /// <summary>
        /// retorna o telefone do usuario que esta sendo cadastrado, caso ele ja tenha cadastro na camara
        /// </summary>
        /// <value>retorna o telefone do usuario que esta sendo cadastrado, caso ele ja tenha cadastro na camara</value>
        [DataMember(Name="phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessTokenDef {\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  Idpessoa: ").Append(Idpessoa).Append("\n");
            sb.Append("  IdtipoPessoa: ").Append(IdtipoPessoa).Append("\n");
            sb.Append("  ValidadeLicencaAssinou: ").Append(ValidadeLicencaAssinou).Append("\n");
            sb.Append("  IdredeDistribuicao: ").Append(IdredeDistribuicao).Append("\n");
            sb.Append("  IsNewUser: ").Append(IsNewUser).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccessTokenDef)obj);
        }

        /// <summary>
        /// Returns true if AccessTokenDef instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessTokenDef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessTokenDef other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TokenType == other.TokenType ||
                    TokenType != null &&
                    TokenType.Equals(other.TokenType)
                ) && 
                (
                    AccessToken == other.AccessToken ||
                    AccessToken != null &&
                    AccessToken.Equals(other.AccessToken)
                ) && 
                (
                    ExpiresIn == other.ExpiresIn ||
                    ExpiresIn != null &&
                    ExpiresIn.Equals(other.ExpiresIn)
                ) && 
                (
                    Idpessoa == other.Idpessoa ||
                    Idpessoa != null &&
                    Idpessoa.Equals(other.Idpessoa)
                ) && 
                (
                    IdtipoPessoa == other.IdtipoPessoa ||
                    IdtipoPessoa != null &&
                    IdtipoPessoa.Equals(other.IdtipoPessoa)
                ) && 
                (
                    ValidadeLicencaAssinou == other.ValidadeLicencaAssinou ||
                    ValidadeLicencaAssinou != null &&
                    ValidadeLicencaAssinou.Equals(other.ValidadeLicencaAssinou)
                ) && 
                (
                    IdredeDistribuicao == other.IdredeDistribuicao ||
                    IdredeDistribuicao != null &&
                    IdredeDistribuicao.Equals(other.IdredeDistribuicao)
                ) && 
                (
                    IsNewUser == other.IsNewUser ||
                    IsNewUser != null &&
                    IsNewUser.Equals(other.IsNewUser)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TokenType != null)
                    hashCode = hashCode * 59 + TokenType.GetHashCode();
                    if (AccessToken != null)
                    hashCode = hashCode * 59 + AccessToken.GetHashCode();
                    if (ExpiresIn != null)
                    hashCode = hashCode * 59 + ExpiresIn.GetHashCode();
                    if (Idpessoa != null)
                    hashCode = hashCode * 59 + Idpessoa.GetHashCode();
                    if (IdtipoPessoa != null)
                    hashCode = hashCode * 59 + IdtipoPessoa.GetHashCode();
                    if (ValidadeLicencaAssinou != null)
                    hashCode = hashCode * 59 + ValidadeLicencaAssinou.GetHashCode();
                    if (IdredeDistribuicao != null)
                    hashCode = hashCode * 59 + IdredeDistribuicao.GetHashCode();
                    if (IsNewUser != null)
                    hashCode = hashCode * 59 + IsNewUser.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccessTokenDef left, AccessTokenDef right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccessTokenDef left, AccessTokenDef right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
