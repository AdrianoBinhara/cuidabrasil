/*
 * FVC
 *
 * API para o app Floripa Versus Corona  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: binhara@azuris.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UsuarioDef : IEquatable<UsuarioDef>
    { 
        /// <summary>
        /// Id da pessoa na base
        /// </summary>
        /// <value>Id da pessoa na base</value>
        [DataMember(Name="idpessoa")]
        public long? Idpessoa { get; set; }

        /// <summary>
        /// Id do tipo de pessoa
        /// </summary>
        /// <value>Id do tipo de pessoa</value>
        [DataMember(Name="idtipo_pessoa")]
        public long? IdtipoPessoa { get; set; }

        /// <summary>
        /// Validade da licenca
        /// </summary>
        /// <value>Validade da licenca</value>
        [DataMember(Name="validade_licenca_assinou")]
        public string ValidadeLicencaAssinou { get; set; }

        /// <summary>
        /// Id da rede de distribuicao
        /// </summary>
        /// <value>Id da rede de distribuicao</value>
        [DataMember(Name="idrede_distribuicao")]
        public long? IdredeDistribuicao { get; set; }

        /// <summary>
        /// Nome do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Nome do usu&amp;aacute;rio.</value>
        [DataMember(Name="nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Login do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Login do usu&amp;aacute;rio.</value>
        [DataMember(Name="login")]
        public string Login { get; set; }

        /// <summary>
        /// Email do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Email do usu&amp;aacute;rio.</value>
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// CPF/CNPJ do usu&amp;aacute;rio.
        /// </summary>
        /// <value>CPF/CNPJ do usu&amp;aacute;rio.</value>
        [DataMember(Name="cpf_cnpj")]
        public string CpfCnpj { get; set; }

        /// <summary>
        /// DDD do usu&amp;aacute;rio.
        /// </summary>
        /// <value>DDD do usu&amp;aacute;rio.</value>
        [DataMember(Name="ddd")]
        public string Ddd { get; set; }

        /// <summary>
        /// Telefone de Nascimento do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Telefone de Nascimento do usu&amp;aacute;rio.</value>
        [DataMember(Name="fone")]
        public string Fone { get; set; }

        /// <summary>
        /// Codigo do municipio do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Codigo do municipio do usu&amp;aacute;rio.</value>
        [DataMember(Name="codmunicipioserpro")]
        public long? Codmunicipioserpro { get; set; }

        /// <summary>
        /// Nome da cidade do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Nome da cidade do usu&amp;aacute;rio.</value>
        [DataMember(Name="cidade")]
        public string Cidade { get; set; }

        /// <summary>
        /// Nome do estado/UF do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Nome do estado/UF do usu&amp;aacute;rio.</value>
        [DataMember(Name="uf")]
        public string Uf { get; set; }

        /// <summary>
        /// CEP do usu&amp;aacute;rio.
        /// </summary>
        /// <value>CEP do usu&amp;aacute;rio.</value>
        [DataMember(Name="cep")]
        public string Cep { get; set; }

        /// <summary>
        /// Endere&amp;ccedil;o do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Endere&amp;ccedil;o do usu&amp;aacute;rio.</value>
        [DataMember(Name="endereco")]
        public string Endereco { get; set; }

        /// <summary>
        /// Bairro do endere&amp;ccedil;o do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Bairro do endere&amp;ccedil;o do usu&amp;aacute;rio.</value>
        [DataMember(Name="bairro")]
        public string Bairro { get; set; }

        /// <summary>
        /// Numero do endere&amp;ccedil;o do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Numero do endere&amp;ccedil;o do usu&amp;aacute;rio.</value>
        [DataMember(Name="numero")]
        public string Numero { get; set; }

        /// <summary>
        /// Complemento do endere&amp;ccedil;o do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Complemento do endere&amp;ccedil;o do usu&amp;aacute;rio.</value>
        [DataMember(Name="complemento")]
        public string Complemento { get; set; }

        /// <summary>
        /// Cod de indicacao do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Cod de indicacao do usu&amp;aacute;rio.</value>
        [DataMember(Name="cod_indicacao")]
        public long? CodIndicacao { get; set; }

        /// <summary>
        /// Data de nascimento do usu&amp;aacute;rio
        /// </summary>
        /// <value>Data de nascimento do usu&amp;aacute;rio</value>
        [DataMember(Name="data_nascimento")]
        public string DataNascimento { get; set; }

        /// <summary>
        /// Indicador CAE do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Indicador CAE do usu&amp;aacute;rio.</value>
        [DataMember(Name="perm_indicar_cae")]
        public string PermIndicarCae { get; set; }

        /// <summary>
        /// Banco do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Banco do usu&amp;aacute;rio.</value>
        [DataMember(Name="banco")]
        public string Banco { get; set; }

        /// <summary>
        /// Agencia do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Agencia do usu&amp;aacute;rio.</value>
        [DataMember(Name="agencia")]
        public string Agencia { get; set; }

        /// <summary>
        /// Conta do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Conta do usu&amp;aacute;rio.</value>
        [DataMember(Name="conta")]
        public string Conta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsuarioDef {\n");
            sb.Append("  Idpessoa: ").Append(Idpessoa).Append("\n");
            sb.Append("  IdtipoPessoa: ").Append(IdtipoPessoa).Append("\n");
            sb.Append("  ValidadeLicencaAssinou: ").Append(ValidadeLicencaAssinou).Append("\n");
            sb.Append("  IdredeDistribuicao: ").Append(IdredeDistribuicao).Append("\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CpfCnpj: ").Append(CpfCnpj).Append("\n");
            sb.Append("  Ddd: ").Append(Ddd).Append("\n");
            sb.Append("  Fone: ").Append(Fone).Append("\n");
            sb.Append("  Codmunicipioserpro: ").Append(Codmunicipioserpro).Append("\n");
            sb.Append("  Cidade: ").Append(Cidade).Append("\n");
            sb.Append("  Uf: ").Append(Uf).Append("\n");
            sb.Append("  Cep: ").Append(Cep).Append("\n");
            sb.Append("  Endereco: ").Append(Endereco).Append("\n");
            sb.Append("  Bairro: ").Append(Bairro).Append("\n");
            sb.Append("  Numero: ").Append(Numero).Append("\n");
            sb.Append("  Complemento: ").Append(Complemento).Append("\n");
            sb.Append("  CodIndicacao: ").Append(CodIndicacao).Append("\n");
            sb.Append("  DataNascimento: ").Append(DataNascimento).Append("\n");
            sb.Append("  PermIndicarCae: ").Append(PermIndicarCae).Append("\n");
            sb.Append("  Banco: ").Append(Banco).Append("\n");
            sb.Append("  Agencia: ").Append(Agencia).Append("\n");
            sb.Append("  Conta: ").Append(Conta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UsuarioDef)obj);
        }

        /// <summary>
        /// Returns true if UsuarioDef instances are equal
        /// </summary>
        /// <param name="other">Instance of UsuarioDef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsuarioDef other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Idpessoa == other.Idpessoa ||
                    Idpessoa != null &&
                    Idpessoa.Equals(other.Idpessoa)
                ) && 
                (
                    IdtipoPessoa == other.IdtipoPessoa ||
                    IdtipoPessoa != null &&
                    IdtipoPessoa.Equals(other.IdtipoPessoa)
                ) && 
                (
                    ValidadeLicencaAssinou == other.ValidadeLicencaAssinou ||
                    ValidadeLicencaAssinou != null &&
                    ValidadeLicencaAssinou.Equals(other.ValidadeLicencaAssinou)
                ) && 
                (
                    IdredeDistribuicao == other.IdredeDistribuicao ||
                    IdredeDistribuicao != null &&
                    IdredeDistribuicao.Equals(other.IdredeDistribuicao)
                ) && 
                (
                    Nome == other.Nome ||
                    Nome != null &&
                    Nome.Equals(other.Nome)
                ) && 
                (
                    Login == other.Login ||
                    Login != null &&
                    Login.Equals(other.Login)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    CpfCnpj == other.CpfCnpj ||
                    CpfCnpj != null &&
                    CpfCnpj.Equals(other.CpfCnpj)
                ) && 
                (
                    Ddd == other.Ddd ||
                    Ddd != null &&
                    Ddd.Equals(other.Ddd)
                ) && 
                (
                    Fone == other.Fone ||
                    Fone != null &&
                    Fone.Equals(other.Fone)
                ) && 
                (
                    Codmunicipioserpro == other.Codmunicipioserpro ||
                    Codmunicipioserpro != null &&
                    Codmunicipioserpro.Equals(other.Codmunicipioserpro)
                ) && 
                (
                    Cidade == other.Cidade ||
                    Cidade != null &&
                    Cidade.Equals(other.Cidade)
                ) && 
                (
                    Uf == other.Uf ||
                    Uf != null &&
                    Uf.Equals(other.Uf)
                ) && 
                (
                    Cep == other.Cep ||
                    Cep != null &&
                    Cep.Equals(other.Cep)
                ) && 
                (
                    Endereco == other.Endereco ||
                    Endereco != null &&
                    Endereco.Equals(other.Endereco)
                ) && 
                (
                    Bairro == other.Bairro ||
                    Bairro != null &&
                    Bairro.Equals(other.Bairro)
                ) && 
                (
                    Numero == other.Numero ||
                    Numero != null &&
                    Numero.Equals(other.Numero)
                ) && 
                (
                    Complemento == other.Complemento ||
                    Complemento != null &&
                    Complemento.Equals(other.Complemento)
                ) && 
                (
                    CodIndicacao == other.CodIndicacao ||
                    CodIndicacao != null &&
                    CodIndicacao.Equals(other.CodIndicacao)
                ) && 
                (
                    DataNascimento == other.DataNascimento ||
                    DataNascimento != null &&
                    DataNascimento.Equals(other.DataNascimento)
                ) && 
                (
                    PermIndicarCae == other.PermIndicarCae ||
                    PermIndicarCae != null &&
                    PermIndicarCae.Equals(other.PermIndicarCae)
                ) && 
                (
                    Banco == other.Banco ||
                    Banco != null &&
                    Banco.Equals(other.Banco)
                ) && 
                (
                    Agencia == other.Agencia ||
                    Agencia != null &&
                    Agencia.Equals(other.Agencia)
                ) && 
                (
                    Conta == other.Conta ||
                    Conta != null &&
                    Conta.Equals(other.Conta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Idpessoa != null)
                    hashCode = hashCode * 59 + Idpessoa.GetHashCode();
                    if (IdtipoPessoa != null)
                    hashCode = hashCode * 59 + IdtipoPessoa.GetHashCode();
                    if (ValidadeLicencaAssinou != null)
                    hashCode = hashCode * 59 + ValidadeLicencaAssinou.GetHashCode();
                    if (IdredeDistribuicao != null)
                    hashCode = hashCode * 59 + IdredeDistribuicao.GetHashCode();
                    if (Nome != null)
                    hashCode = hashCode * 59 + Nome.GetHashCode();
                    if (Login != null)
                    hashCode = hashCode * 59 + Login.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (CpfCnpj != null)
                    hashCode = hashCode * 59 + CpfCnpj.GetHashCode();
                    if (Ddd != null)
                    hashCode = hashCode * 59 + Ddd.GetHashCode();
                    if (Fone != null)
                    hashCode = hashCode * 59 + Fone.GetHashCode();
                    if (Codmunicipioserpro != null)
                    hashCode = hashCode * 59 + Codmunicipioserpro.GetHashCode();
                    if (Cidade != null)
                    hashCode = hashCode * 59 + Cidade.GetHashCode();
                    if (Uf != null)
                    hashCode = hashCode * 59 + Uf.GetHashCode();
                    if (Cep != null)
                    hashCode = hashCode * 59 + Cep.GetHashCode();
                    if (Endereco != null)
                    hashCode = hashCode * 59 + Endereco.GetHashCode();
                    if (Bairro != null)
                    hashCode = hashCode * 59 + Bairro.GetHashCode();
                    if (Numero != null)
                    hashCode = hashCode * 59 + Numero.GetHashCode();
                    if (Complemento != null)
                    hashCode = hashCode * 59 + Complemento.GetHashCode();
                    if (CodIndicacao != null)
                    hashCode = hashCode * 59 + CodIndicacao.GetHashCode();
                    if (DataNascimento != null)
                    hashCode = hashCode * 59 + DataNascimento.GetHashCode();
                    if (PermIndicarCae != null)
                    hashCode = hashCode * 59 + PermIndicarCae.GetHashCode();
                    if (Banco != null)
                    hashCode = hashCode * 59 + Banco.GetHashCode();
                    if (Agencia != null)
                    hashCode = hashCode * 59 + Agencia.GetHashCode();
                    if (Conta != null)
                    hashCode = hashCode * 59 + Conta.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UsuarioDef left, UsuarioDef right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UsuarioDef left, UsuarioDef right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
