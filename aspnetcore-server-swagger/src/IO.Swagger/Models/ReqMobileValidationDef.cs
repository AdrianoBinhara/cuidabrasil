/*
 * FVC
 *
 * API para o app Floripa Versus Corona  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: binhara@azuris.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReqMobileValidationDef : IEquatable<ReqMobileValidationDef>
    { 
        /// <summary>
        /// Login do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Login do usu&amp;aacute;rio.</value>
        [DataMember(Name="username")]
        public string Username { get; set; }

        /// <summary>
        /// Telefone do usu&amp;aacute;rio.
        /// </summary>
        /// <value>Telefone do usu&amp;aacute;rio.</value>
        [DataMember(Name="phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Modelo do device
        /// </summary>
        /// <value>Modelo do device</value>
        [DataMember(Name="phoneModel")]
        public string PhoneModel { get; set; }

        /// <summary>
        /// IMEI do device
        /// </summary>
        /// <value>IMEI do device</value>
        [DataMember(Name="imei")]
        public long? Imei { get; set; }

        /// <summary>
        /// UUID do device
        /// </summary>
        /// <value>UUID do device</value>
        [DataMember(Name="uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// chave de validacao
        /// </summary>
        /// <value>chave de validacao</value>
        [DataMember(Name="validationCode")]
        public string ValidationCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReqMobileValidationDef {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneModel: ").Append(PhoneModel).Append("\n");
            sb.Append("  Imei: ").Append(Imei).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  ValidationCode: ").Append(ValidationCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReqMobileValidationDef)obj);
        }

        /// <summary>
        /// Returns true if ReqMobileValidationDef instances are equal
        /// </summary>
        /// <param name="other">Instance of ReqMobileValidationDef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReqMobileValidationDef other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    PhoneModel == other.PhoneModel ||
                    PhoneModel != null &&
                    PhoneModel.Equals(other.PhoneModel)
                ) && 
                (
                    Imei == other.Imei ||
                    Imei != null &&
                    Imei.Equals(other.Imei)
                ) && 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    ValidationCode == other.ValidationCode ||
                    ValidationCode != null &&
                    ValidationCode.Equals(other.ValidationCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                    if (PhoneModel != null)
                    hashCode = hashCode * 59 + PhoneModel.GetHashCode();
                    if (Imei != null)
                    hashCode = hashCode * 59 + Imei.GetHashCode();
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (ValidationCode != null)
                    hashCode = hashCode * 59 + ValidationCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReqMobileValidationDef left, ReqMobileValidationDef right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReqMobileValidationDef left, ReqMobileValidationDef right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
